package vista;

//import conexion.Conexion;
//import controlador.Ctrl_RegistrarVenta;
//import controlador.VentaPDF;
import ConexionSQL.Conectar;
import Modelo.Detalle_Recibo;
import Modelo.Producto;
import java.awt.Dimension;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
//import modelo.CabeceraVenta;
//import modelo.DetalleVenta;

public class InterFacturacion extends javax.swing.JInternalFrame {

    ArrayList<Detalle_Recibo> listaProductos = new ArrayList<>();
    DefaultTableModel modeloDatosProductos;
    String[] TituloTabla = {"Recibo","id producto","Producto", "Cantidad", "Precio", "Subtotal"};
    public static Detalle_Recibo dr;

    private int idCliente = 0;//id del cliente sleccionado

    private int idProducto = 0;
    private String nombre = "";
    private int cantidadProductoBBDD = 0;
    private double precioUnitario = 0.0;
    private int porcentajeIGV = 0;

    private int cantidad = 0;//cantidad de productos a comprar
    private double subtotal = 0.0;//cantidad por precio
    private double descuento = 0.0;
    private double igv = 0.0;
    private double totalPagar = 0.0;

    //variables para calculos globales
    private double subtotalGeneral = 0.0;
    private double descuentoGeneral = 0.0;
    private double ivaGeneral = 0.0;
    private double totalPagarGeneral = 0.0;
    //fin de variables de calculos globales

    private int auxIdDetalle = 1;//id del detalle de venta

    private double sumaTotales = 0.0;
    private DecimalFormat decimalFormat = new DecimalFormat("#.##");

    public InterFacturacion() {
        initComponents();

        this.setTitle("Facturación - Lima Cakes");
        modeloDatosProductos = new DefaultTableModel(null, TituloTabla);
        this.jTable_productos.setModel(modeloDatosProductos);

        //Cargar lo Clientes en la vista - cargar productos
        this.CargarComboClientes();
        this.CargarComboProductos();

        jComboBox_producto.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Llamar al método para actualizar el TextField cuando se seleccione un nuevo elemento
                DatosDelProducto();
            }
        });

        spnCantidad.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                double precioUnitario = Double.parseDouble(txt_precio.getText());
                double valorSpinner = (int) spnCantidad.getValue() * (double) precioUnitario;
                labelTotal.setText("" + valorSpinner);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        labelTotal = new javax.swing.JLabel();
        cbx_cliente = new javax.swing.JComboBox<>();
        jButton_calcular_cambio = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txt_igv = new javax.swing.JTextField();
        jComboBox_producto = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_total_pagar = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_cambio = new javax.swing.JTextField();
        jButton_RegistrarVenta = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jButton_añadir_producto = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txt_precio = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        spnCantidad = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        btn_eliminarfila = new javax.swing.JButton();
        txt_subtotal = new javax.swing.JTextField();
        txt_efectivo = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txt_recibo = new javax.swing.JTextField();
        txt_codigoProducto = new javax.swing.JTextField();

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Producto:");

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 198, 89));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REGISTRO DE VENTA");
        jPanel3.add(jLabel1);

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 30));

        jPanel2.setBackground(new java.awt.Color(252, 248, 232));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelTotal.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        labelTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTotal.setText("--");
        labelTotal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel2.add(labelTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, 90, 20));

        cbx_cliente.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        cbx_cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione cliente", "Item 2", "Item 3", "Item 4" }));
        cbx_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_clienteActionPerformed(evt);
            }
        });
        jPanel2.add(cbx_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 430, 30));

        jButton_calcular_cambio.setBackground(new java.awt.Color(255, 198, 89));
        jButton_calcular_cambio.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jButton_calcular_cambio.setText("Calcular");
        jButton_calcular_cambio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, new java.awt.Color(0, 0, 0), null, null));
        jButton_calcular_cambio.setContentAreaFilled(false);
        jButton_calcular_cambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calcular_cambioActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_calcular_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 440, 120, 30));

        jLabel7.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel7.setText("IGV:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 390, 60, -1));

        txt_igv.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        txt_igv.setForeground(new java.awt.Color(255, 255, 255));
        txt_igv.setEnabled(false);
        jPanel2.add(txt_igv, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 390, 120, 30));

        jComboBox_producto.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(jComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 270, 30));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Producto:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 60, -1));

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel5.setText("Subtotal:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 350, 60, -1));

        jLabel8.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel8.setText("Total a pagar:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, -1, -1));

        txt_total_pagar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        txt_total_pagar.setForeground(new java.awt.Color(255, 255, 255));
        txt_total_pagar.setEnabled(false);
        txt_total_pagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_total_pagarActionPerformed(evt);
            }
        });
        jPanel2.add(txt_total_pagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 430, 120, 30));

        jLabel9.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel9.setText("Efectivo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 360, -1, -1));

        jLabel10.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel10.setText("Cambio:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 400, -1, -1));

        txt_cambio.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        txt_cambio.setEnabled(false);
        jPanel2.add(txt_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 400, 120, -1));

        jButton_RegistrarVenta.setBackground(new java.awt.Color(255, 198, 89));
        jButton_RegistrarVenta.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jButton_RegistrarVenta.setText("Registrar Venta");
        jButton_RegistrarVenta.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, new java.awt.Color(0, 0, 0), null, null));
        jButton_RegistrarVenta.setContentAreaFilled(false);
        jButton_RegistrarVenta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_RegistrarVenta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_RegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RegistrarVentaActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_RegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 400, 140, 30));

        btnAtras.setBackground(new java.awt.Color(255, 198, 89));
        btnAtras.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        btnAtras.setText("Atrás");
        btnAtras.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, new java.awt.Color(0, 0, 0), null, null));
        btnAtras.setContentAreaFilled(false);
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });
        jPanel2.add(btnAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 440, 140, 40));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_productosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 620, 170));

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 640, 190));

        jButton_añadir_producto.setBackground(new java.awt.Color(255, 198, 89));
        jButton_añadir_producto.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jButton_añadir_producto.setText("Añadir");
        jButton_añadir_producto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, new java.awt.Color(0, 0, 0), null, null));
        jButton_añadir_producto.setContentAreaFilled(false);
        jButton_añadir_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_añadir_productoActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_añadir_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 60, 120, 30));

        jLabel6.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Cantidad:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 60, 20));

        txt_precio.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        txt_precio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel2.add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 60, 90, 30));

        jLabel11.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Total:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, 40, 30));
        jPanel2.add(spnCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, 30));

        jLabel13.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Precio:");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 40, 30));

        btn_eliminarfila.setBackground(new java.awt.Color(255, 198, 89));
        btn_eliminarfila.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        btn_eliminarfila.setText("Eliminar fila");
        btn_eliminarfila.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, new java.awt.Color(0, 0, 0), null, null));
        btn_eliminarfila.setContentAreaFilled(false);
        btn_eliminarfila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarfilaActionPerformed(evt);
            }
        });
        jPanel2.add(btn_eliminarfila, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 350, 140, 40));

        txt_subtotal.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        txt_subtotal.setForeground(new java.awt.Color(255, 255, 255));
        txt_subtotal.setEnabled(false);
        jPanel2.add(txt_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 350, 120, 30));
        jPanel2.add(txt_efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 352, 120, 30));

        jLabel14.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Cliente:");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 50, 20));

        jLabel15.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Recibo:");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 50, 20));

        txt_recibo.setText("R-");
        jPanel2.add(txt_recibo, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, 60, -1));

        txt_codigoProducto.setBackground(new java.awt.Color(252, 248, 232));
        txt_codigoProducto.setForeground(new java.awt.Color(252, 248, 232));
        txt_codigoProducto.setBorder(null);
        jPanel2.add(txt_codigoProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 120, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 680, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_añadir_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_añadir_productoActionPerformed

        Detalle_Recibo dr = new Detalle_Recibo();
        try {
            dr.setIdDetalle(this.txt_recibo.getText());
            dr.setProdcod(Integer.parseInt(this.txt_codigoProducto.getText()));
//            dr.set(this.txt_recibo.getText());
            dr.setProdnom(this.jComboBox_producto.getSelectedItem().toString());
            dr.setCantidad(Integer.parseInt(this.spnCantidad.getValue().toString()));

            String precioTexto = this.txt_precio.getText();
            if (!precioTexto.isEmpty()) {
                dr.setProdpre(Double.parseDouble(precioTexto));
            } else {
                // Manejar el caso en el que el campo de precio está vacío
                JOptionPane.showMessageDialog(null, "El campo de precio no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Salir del método
            }

            dr.setSubtotal(Double.parseDouble(this.labelTotal.getText()));
            modeloDatosProductos.addRow(dr.registrarItem());

            // Actualizar la suma acumulativa y el TextField
            sumaTotales += dr.getSubtotal();
            txt_subtotal.setText(decimalFormat.format(sumaTotales));

            double igv = sumaTotales * 0.18;
            txt_igv.setText(decimalFormat.format(igv));
            txt_total_pagar.setText(decimalFormat.format(sumaTotales));

            JOptionPane.showMessageDialog(null, "Producto añadido correctamente");
        } catch (NumberFormatException e) {
            // Manejar la excepción si el usuario ingresó un valor no válido en algún campo numérico
            JOptionPane.showMessageDialog(null, "Error al procesar los datos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Manejar otras excepciones generales
            JOptionPane.showMessageDialog(null, "Error al añadir el producto.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Restablecer campos
        this.jComboBox_producto.setSelectedIndex(0);
        this.spnCantidad.setValue(0);
        this.txt_precio.setText("");
        this.labelTotal.setText("");

    }//GEN-LAST:event_jButton_añadir_productoActionPerformed

    private void listaTablaProductos() {
        this.modeloDatosProductos.setRowCount(6);
        for (int i = 0; i < 6; i++) {
            this.modeloDatosProductos.setValueAt(i + 1, i, 0);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getProdnom(), i, 1);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getProdnom(), i, 2);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getCantidad(), i, 3);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getProdpre(), i, 4);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getSubtotal(), i, 5);
        }
        //añadir al Jtable
        jTable_productos.setModel(modeloDatosProductos);
    }
    private void jTable_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_productosMouseClicked
        //        int fila_point = jTable_productos.rowAtPoint(evt.getPoint());
        //        int columna_point = 0;
        //        if (fila_point > -1) {
        //            idArrayList = (int) modeloDatosProductos.getValueAt(fila_point, columna_point);
        //        }
        //        int opcion = JOptionPane.showConfirmDialog(null, "¿Desea Eliminar Producto?");
        //        //opciones de confir dialog - (si = 0; no = 1; cancel = 2; close = -1)
        //        switch (opcion) {
        //            case 0: //presione si
        //                listaProductos.remove(idArrayList - 1);
        //                this.CalcularTotalPagar();
        //                this.listaTablaProductos();
        //                break;
        //            case 1: //presione no
        //                break;
        //            default://sea que presione cancel (2) o close (-1)
        //                break;
        //        }
    }//GEN-LAST:event_jTable_productosMouseClicked

    private void jButton_RegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RegistrarVentaActionPerformed
        DefaultTableModel tablaProductos = (DefaultTableModel) jTable_productos.getModel();
        int fila = tablaProductos.getRowCount();

        Date fechaActual = new Date();
        java.sql.Date sqlFechaActual = new java.sql.Date(fechaActual.getTime());

        Connection cn = null;

        try {
            if (!cbx_cliente.getSelectedItem().equals("Seleccione cliente")) {
                cn = Conectar.getConexion();
                try {
                    cn.setAutoCommit(false);
                    
                    // Insertar recibo
                    String sql1 = "INSERT INTO recibo (reb_cod, reb_fec, cli_cod, reb_total_final) VALUES (?,?, ?, ?)";
                    PreparedStatement st = cn.prepareStatement(sql1, Statement.RETURN_GENERATED_KEYS);
                    
                    double totalPagar = Double.parseDouble(txt_total_pagar.getText().replace(',', '.'));
                    
                    st.setString(1, txt_recibo.getText());
                    st.setDate(2, sqlFechaActual);
                    st.setInt(3, ObtenerIdCliente());
                    st.setDouble(4, totalPagar);
                    System.out.println(st);
                    st.executeUpdate();

                    for (int i = 0; i < fila; i++) {
                        String sql2 = "INSERT INTO detalle_recibo (reb_cod, prod_can, prod_cod) VALUES (?, ?, ?)";
                        PreparedStatement st2 = cn.prepareStatement(sql2);
                        Object prod_id = tablaProductos.getValueAt(i, 1);
                        Object cant_prod = tablaProductos.getValueAt(i, 3);

                        st2.setString(1, txt_recibo.getText());
                        st2.setInt(2, Integer.parseInt(cant_prod.toString()));
                        st2.setInt(3, Integer.parseInt(prod_id.toString()));
                        System.out.println(st2);
                        st2.executeUpdate();
                    }

                    // Confirmar la transacción
                    cn.commit();
                    JOptionPane.showMessageDialog(this, "Venta registrada con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    
                    this.cbx_cliente.setSelectedIndex(0);
                    this.jComboBox_producto.setSelectedIndex(0);
                    this.spnCantidad.setValue(0);
                    this.txt_precio.setText("");
                    this.labelTotal.setText("");
                    this.txt_recibo.setText("R-");
                } catch (SQLException e) {
                    // Deshacer la transacción en caso de error
                    if (cn != null) {
                        cn.rollback();
                    }
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al registrar la venta", "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    // Cerrar la conexión
                    if (cn != null) {
                        cn.close();
                    }
                }
            } else{
                System.out.println("Seleccione un cliente por favor");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error general", "Error", JOptionPane.ERROR_MESSAGE);
        }
      

        //        CabeceraVenta cabeceraVenta = new CabeceraVenta();
        //        DetalleVenta detalleVenta = new DetalleVenta();
        //        Ctrl_RegistrarVenta controlVenta = new Ctrl_RegistrarVenta();
        //
        //        String fechaActual = "";
        //        Date date = new Date();
        //        fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(date);
        //
        //        if (!jComboBox_cliente.getSelectedItem().equals("Seleccione cliente:")) {
        //            if (listaProductos.size() > 0) {
        //
        //                //metodo para obtener el id del cliente
        //                this.ObtenerIdCliente();
        //                //registrar cabecera
        //                cabeceraVenta.setIdCabeceraventa(0);
        //                cabeceraVenta.setIdCliente(idCliente);
        //                cabeceraVenta.setValorPagar(Double.parseDouble(txt_total_pagar.getText()));
        //                cabeceraVenta.setFechaVenta(fechaActual);
        //                cabeceraVenta.setEstado(1);
        //
        //                if (controlVenta.guardar(cabeceraVenta)) {
        //                    JOptionPane.showMessageDialog(null, "¡Venta Registrada!");
        //
        //                    //Generar la factura de venta
        //                    VentaPDF pdf = new VentaPDF();
        //                    pdf.DatosCliente(idCliente);
        //                    pdf.generarFacturaPDF();
        //
        //                    //guardar detalle
        //                    for (DetalleVenta elemento : listaProductos) {
        //                        detalleVenta.setIdDetalleVenta(0);
        //                        detalleVenta.setIdCabeceraVenta(0);
        //                        detalleVenta.setIdProducto(elemento.getIdProducto());
        //                        detalleVenta.setCantidad(elemento.getCantidad());
        //                        detalleVenta.setPrecioUnitario(elemento.getPrecioUnitario());
        //                        detalleVenta.setSubTotal(elemento.getSubTotal());
        //                        detalleVenta.setDescuento(elemento.getDescuento());
        //                        detalleVenta.setIva(elemento.getIGV());
        //                        detalleVenta.setTotalPagar(elemento.getTotalPagar());
        //                        detalleVenta.setEstado("Activo");
        //
        //                        if (controlVenta.guardarDetalle(detalleVenta)) {
        //                            //System.out.println("Detalle de Venta Registrado");
        //
        //                            txt_subtotal.setText("0.0");
        //                            txt_iva.setText("0.0");
        //                            txt_descuento.setText("0.0");
        //                            txt_total_pagar.setText("0.0");
        //                            txt_efectivo.setText("");
        //                            txt_cambio.setText("0.0");
        //                            auxIdDetalle = 1;
        //
        //                            this.CargarComboClientes();
        //                            this.RestarStockProductos(elemento.getIdProducto(), elemento.getCantidad());
        //
        //                        } else {
        //                            JOptionPane.showMessageDialog(null, "¡Error al guardar detalle de venta!");
        //                        }
        //                    }
        //                    //vaciamos la lista
        //                    listaProductos.clear();
        //                    listaTablaProductos();
        //
        //                } else {
        //                    JOptionPane.showMessageDialog(null, "¡Error al guardar cabecera de venta!");
        //                }
        //            } else {
        //                JOptionPane.showMessageDialog(null, "¡Seleccione un producto!");
        //            }
        //        } else {
        //            JOptionPane.showMessageDialog(null, "¡Seleccione un cliente!");
        //        }
    }//GEN-LAST:event_jButton_RegistrarVentaActionPerformed

    private void jButton_calcular_cambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calcular_cambioActionPerformed
        if (!txt_efectivo.getText().isEmpty()) {
            // Validamos que el usuario no ingrese otros caracteres no numéricos
            boolean validacion = validarDouble(txt_efectivo.getText());

            if (validacion) {
                // Validar que el efectivo sea mayor a cero
                try {
                    double efc = Double.parseDouble(txt_efectivo.getText().trim());
                    double top = Double.parseDouble(txt_total_pagar.getText().trim());

                    if (efc < top) {
                        JOptionPane.showMessageDialog(null, "El Dinero en efectivo no es suficiente");
                    } else {
                        double cambio = (efc - top);
                        double cambi = Math.round(cambio * 100) / 100.0;

                        DecimalFormat decimalFormat = new DecimalFormat("#.##");
                        String camb = decimalFormat.format(cambi);

                        txt_cambio.setText(camb);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Error en el formato del número. Ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se admiten caracteres no numéricos", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese dinero en efectivo para calcular cambio", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton_calcular_cambioActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btn_eliminarfilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarfilaActionPerformed
        int filaSeleccionada = jTable_productos.getSelectedRow();
        if (filaSeleccionada != -1) {
            double subtotalEliminado = (double) jTable_productos.getValueAt(filaSeleccionada, jTable_productos.getColumnCount() - 1);

            // Actualizar la suma acumulativa y el TextField al eliminar una fila
            sumaTotales -= subtotalEliminado;
            txt_subtotal.setText(Double.toString(sumaTotales));

            modeloDatosProductos.removeRow(filaSeleccionada);
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona una fila para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_eliminarfilaActionPerformed

    private void cbx_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_clienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_clienteActionPerformed

    private void txt_total_pagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_total_pagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_total_pagarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btn_eliminarfila;
    private javax.swing.JComboBox<String> cbx_cliente;
    private javax.swing.JButton jButton_RegistrarVenta;
    private javax.swing.JButton jButton_añadir_producto;
    private javax.swing.JButton jButton_calcular_cambio;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JSpinner spnCantidad;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_codigoProducto;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_igv;
    private javax.swing.JTextField txt_precio;
    private javax.swing.JTextField txt_recibo;
    private javax.swing.JTextField txt_subtotal;
    public static javax.swing.JTextField txt_total_pagar;
    // End of variables declaration//GEN-END:variables


    /*
    Metodo para cargar los clientes en el jComboBox
     */
    private void CargarComboClientes() {
        Connection cn = Conectar.getConexion();
        String sql = "select * from cliente";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            cbx_cliente.removeAllItems();
            cbx_cliente.addItem("Seleccione cliente:");
            while (rs.next()) {
                cbx_cliente.addItem(rs.getString(2) + " " + rs.getString(3));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("¡Error al cargar clientes, !" + e);
        }
    }

    /*
    Metodo para cargar los productos en el jComboBox
     */
    private void CargarComboProductos() {
        Connection cn = Conectar.getConexion();
        String sql = "select * from PRODUCTO";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("Seleccione producto:");
            while (rs.next()) {
                jComboBox_producto.addItem(rs.getString(2));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("¡Error al cargar productos, !" + e);
        }
    }

    /*
        Metodo para validar que el usuario no ingrese caracteres no numericos
     */
    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /*
        Metodo para validar que el usuario no ingrese caracteres no numericos
     */
    private boolean validarDouble(String valor) {
        try {
            double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /*
        Metodo para mostrar los datos del producto seleccionado
     */
    private void DatosDelProducto() {
        try {
            String sql = "select * from producto where prod_nom like '" + this.jComboBox_producto.getSelectedItem() + "'";
            Connection cn = Conectar.getConexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            Producto p = new Producto();
            while (rs.next()) {

                p.setProdcod(rs.getInt(1));
                p.setProdnom(rs.getString(2));
                p.setProddes(rs.getString(3));
                p.setProdpre(rs.getDouble(4));

                txt_precio.setText(Double.toString(p.getProdpre()));
                txt_codigoProducto.setText(Integer.toString(p.getProdcod()));

            }
        } catch (SQLException e) {
            System.out.println("Error al obtener datos del producto, " + e);
        }
    }

    /*
        Metodo para calcular iva
     */
    private double CalcularIva(double precio, int porcentajeIva) {
        int p_iva = porcentajeIva;

        switch (p_iva) {
            case 0:
                igv = 0.0;
                break;
            case 12:
                igv = (precio * cantidad) * 0.12;
                break;
            case 14:
                igv = (precio * cantidad) * 0.14;
                break;
            default:
                break;
        }

        return igv;
    }

    /*
    Metodo para calcular el total a pagar de todos los productos agregados
     */
    private void CalcularTotalPagar() {
//        subtotalGeneral = 0;
//        descuentoGeneral = 0;
//        ivaGeneral = 0;
//        totalPagarGeneral = 0;
//
//        for (DetalleVenta elemento : listaProductos) {
//            subtotalGeneral += elemento.getSubTotal();
//            descuentoGeneral += elemento.getDescuento();
//            ivaGeneral += elemento.getIGV();
//            totalPagarGeneral += elemento.getTotalPagar();
//        }
//        //redondear decimales
//        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
//        ivaGeneral = (double) Math.round(ivaGeneral * 100) / 100;
//        descuentoGeneral = (double) Math.round(descuentoGeneral * 100) / 100;
//        totalPagarGeneral = (double) Math.round(totalPagarGeneral * 100) / 100;
//
//        //enviar datos a la vista
//        txt_subtotal.setText(String.valueOf(subtotalGeneral));
//        txt_iva.setText(String.valueOf(ivaGeneral));
//        txt_descuento.setText(String.valueOf(descuentoGeneral));
//        txt_total_pagar.setText(String.valueOf(totalPagarGeneral));
    }

    /*
    Metodo para obtener id del cliente
     */
    private int ObtenerIdCliente() {
        int idCliente = -1;
        try {
            String sql = "SELECT cli_cod FROM cliente WHERE concat(cli_nom,' ',cli_ape) LIKE ?";
            Connection cn = Conectar.getConexion();
            try (PreparedStatement st = cn.prepareStatement(sql)) {
                st.setString(1, this.cbx_cliente.getSelectedItem().toString());
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    idCliente = rs.getInt("cli_cod");
                }
            } catch (SQLException e) {
                System.out.println("Error al obtener id del cliente: " + e);
            }
        } catch (Exception e) {
            System.out.println("Error general en ObtenerIdCliente: " + e);
        }
        return idCliente;
    }

    //metodo para restar la cantidad (stock) de los productos vendidos
    private void RestarStockProductos(int idProducto, int cantidad) {
//        int cantidadProductosBaseDeDatos = 0;
//        try {
//            Connection cn = Conexion.conectar();
//            String sql = "select ID_PRODUCTO, CANTIDAD from PRODUCTOS where ID_PRODUCTO = '" + idProducto + "'";
//            Statement st;
//            st = cn.createStatement();
//            ResultSet rs = st.executeQuery(sql);
//            while (rs.next()) {
//                cantidadProductosBaseDeDatos = rs.getInt("CANTIDAD");
//            }
//            cn.close();
//        } catch (SQLException e) {
//            System.out.println("Error al restar cantidad 1, " + e);
//        }
//
//        try {
//            Connection cn = Conexion.conectar();
//            PreparedStatement consulta = cn.prepareStatement("update PRODUCTOS set CANTIDAD=? where ID_PRODUCTO = '" + idProducto + "'");
//            int cantidadNueva = cantidadProductosBaseDeDatos - cantidad;
//            consulta.setInt(1, cantidadNueva);
//            if(consulta.executeUpdate() > 0){
//                //System.out.println("Todo bien");
//            }
//            cn.close();
//        } catch (SQLException e) {
//            System.out.println("Error al restar cantidad 2, " + e);
//        }
    }
}
