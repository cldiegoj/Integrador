package vista;


import ConexionSQL.Conectar;
import Modelo.Insumos;
import Modelo.Producto;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
//import modelo.Cliente;
import Modelo.Usuario;
import ModeloDAO.InsumoDAO;
import ModeloDAO.ProductoDAO;
import java.awt.HeadlessException;
import java.util.List;
import static vista.InterGestionarProducto.jTable_productos;

public class InterGestionarInsumo extends javax.swing.JInternalFrame {

    private int idInsumo;
    int obtenerIdCategoriaCombo = 0;

    public InterGestionarInsumo() {
        initComponents();

        this.setTitle("Gestionar Insumos");
        this.CargarTablaInsumos();
        this.CargarComboProveedor();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        txt_stock = new javax.swing.JTextField();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_insumos = new javax.swing.JTable();
        comboproveedor = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 198, 89));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("MENÚ - ADMINISTRADOR DE INSUMOS");
        jPanel2.add(jLabel1);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 30));

        jPanel3.setBackground(new java.awt.Color(252, 248, 232));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Stock:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 70, -1));

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Descripción:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 80, -1));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 230, 60, -1));

        jLabel8.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Proveedor:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, 80, -1));

        txt_nombre.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        txt_nombre.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 280, -1));

        txt_descripcion.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        txt_descripcion.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 280, -1));

        txt_stock.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        txt_stock.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(txt_stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, 280, -1));

        jButton_actualizar.setBackground(new java.awt.Color(252, 248, 232));
        jButton_actualizar.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 12)); // NOI18N
        jButton_actualizar.setForeground(new java.awt.Color(0, 0, 0));
        jButton_actualizar.setText("GUARDAR");
        jButton_actualizar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, java.awt.Color.black, null, null));
        jButton_actualizar.setContentAreaFilled(false);
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel3.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 270, 180, 30));

        jButton_eliminar.setBackground(new java.awt.Color(252, 248, 232));
        jButton_eliminar.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 12)); // NOI18N
        jButton_eliminar.setForeground(new java.awt.Color(0, 0, 0));
        jButton_eliminar.setText("ELIMINAR");
        jButton_eliminar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, java.awt.Color.black, null, null));
        jButton_eliminar.setContentAreaFilled(false);
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel3.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 310, 180, 30));

        btnAtras.setBackground(new java.awt.Color(252, 248, 232));
        btnAtras.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 12)); // NOI18N
        btnAtras.setForeground(new java.awt.Color(0, 0, 0));
        btnAtras.setText("ATRÁS");
        btnAtras.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, java.awt.Color.black, null, null));
        btnAtras.setContentAreaFilled(false);
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });
        jPanel3.add(btnAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 230, 180, 30));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_insumos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_insumos.setEnabled(false);
        jTable_insumos.setFillsViewportHeight(true);
        jTable_insumos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable_insumos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 600, 170));

        jPanel3.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 630, 190));

        comboproveedor.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 12)); // NOI18N
        comboproveedor.setForeground(new java.awt.Color(0, 0, 0));
        comboproveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione proveedor" }));
        comboproveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboproveedorActionPerformed(evt);
            }
        });
        jPanel3.add(comboproveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 280, 20));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 710, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed
        Insumos insumo = new Insumos();
        InsumoDAO insumodao = new InsumoDAO();
        String proveedor = "";
        proveedor = comboproveedor.getSelectedItem().toString().trim();

        //validar campos
        if (txt_nombre.getText().isEmpty() || txt_descripcion.getText().isEmpty() || txt_stock.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
        } else {
            if (proveedor.equalsIgnoreCase("Seleccione proveedor:")) {
                JOptionPane.showMessageDialog(null, "Seleccione proveedor");
            } else {
                try {
                    insumo.setNombre(txt_nombre.getText().trim());
                    insumo.setStock(Integer.parseInt(txt_stock.getText().trim()));
                    insumo.setDescripcion(txt_descripcion.getText().trim());

                    //idcategoria - cargar metodo que obtiene el id de categoria
                    this.IdProveedor();
                    insumo.setIdProveedor(obtenerIdCategoriaCombo);

                    if (insumodao.actualizar(insumo, idInsumo)) {
                        JOptionPane.showMessageDialog(null, "Registro Actualizado");
                        this.CargarComboProveedor();
                        this.CargarTablaInsumos();
                        this.Limpiar();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al Actualizar");
                    }
                } catch (HeadlessException | NumberFormatException e) {
                    System.out.println("Error en: " + e);
                }
            }

        }
    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed

        InsumoDAO insumodao = new InsumoDAO();
        if (idInsumo == 0) {
            JOptionPane.showMessageDialog(null, "¡Seleccione un Producto!");
        } else {
            if (!insumodao.eliminar(idInsumo)) {
                JOptionPane.showMessageDialog(null, "¡Producto Eliminado!");
                this.CargarTablaInsumos();
                this.CargarComboProveedor();
                this.Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "¡Error al eliminar producto!");
            }
        }
    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void comboproveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboproveedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboproveedorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    public javax.swing.JComboBox<String> comboproveedor;
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_insumos;
    public javax.swing.JTextField txt_descripcion;
    public javax.swing.JTextField txt_nombre;
    public javax.swing.JTextField txt_stock;
    // End of variables declaration//GEN-END:variables

    /*
     * *****************************************************
     * metodo para limpiar
     * *****************************************************
     */
    private void Limpiar() {
        txt_nombre.setText("");
        txt_descripcion.setText("");
        txt_stock.setText("");
    }


    /*
     * *****************************************************
     * metodo para mostrar todos los clientes registrados
     * *****************************************************
     */
    private void CargarTablaInsumos() {
        DefaultTableModel model = new DefaultTableModel();

        InterGestionarInsumo.jTable_insumos = new JTable(model);
        InterGestionarInsumo.jScrollPane1.setViewportView(InterGestionarInsumo.jTable_insumos);

        model.addColumn("N°");//ID
        model.addColumn("NOMBRE");
        model.addColumn("DESCRIPCION:");
        model.addColumn("STOCK");
        model.addColumn("PROVEEDOR");
        
        
        Object[] fila = new Object[5];
        InsumoDAO insumodao = new InsumoDAO();
        List<Insumos> lista = insumodao.lista();

        for (Insumos x : lista) {
            fila[0] = x.getIdInsumos();
            fila[1] = x.getNombre();
            fila[2] = x.getDescripcion();
            fila[3] = x.getStock();
            fila[4] = x.getNombreproveedor();
            model.addRow(fila);
        }

        //evento para obtener campo al cual el usuario da click
        //y obtener la interfaz que mostrara la informacion general
        jTable_insumos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_insumos.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idInsumo = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosInsumoSeleccionado(idInsumo);//metodo
                }
            }
        });
    }
    /*
     * **************************************************
     * Metodo que envia datos seleccionados
     * **************************************************
     */
    private void EnviarDatosInsumoSeleccionado(int idInsumo) {
        try {
            Connection con = Conectar.getConexion();
            PreparedStatement pst = con.prepareStatement(
                    "select * from insumos where ins_cod = '" + idInsumo + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                txt_nombre.setText(rs.getString("ins_nom"));
                txt_descripcion.setText(rs.getString("ins_des"));
                txt_stock.setText(rs.getString("ins_stk"));
                int idCate = rs.getInt("pro_cod");
                comboproveedor.setSelectedItem(relacionarCategoria(idCate));
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al seleccionar usuario: " + e);
        }
    }
    
    String descripcionProveedor;
    
    private String relacionarCategoria(int idProveedor) {

        String sql = "select pro_nom from proveedor where pro_cod= '" + idProveedor + "'";
        Statement st;
        try {
            Connection cn = Conectar.getConexion();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                descripcionProveedor = rs.getString("pro_nom");
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("¡Error al obtener el ID de la categoria!");
        }
        return descripcionProveedor;
    }
    
    private void CargarComboProveedor() {
        Connection cn = Conectar.getConexion();
        String sql = "select pro_nom from proveedor";
        Statement st;

        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            comboproveedor.removeAllItems();
            comboproveedor.addItem("Seleccione proveedor:");
            while (rs.next()) {
                comboproveedor.addItem(rs.getString("pro_nom"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cargar categorias");
        }
    }
    
     private int IdProveedor() {
        String sql = "select * from proveedor where pro_nom = '" + this.comboproveedor.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = Conectar.getConexion();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("pro_cod");
            }
        } catch (SQLException e) {
            System.out.println("Error al obener id categoria");
        }
        return obtenerIdCategoriaCombo;
    }
}
